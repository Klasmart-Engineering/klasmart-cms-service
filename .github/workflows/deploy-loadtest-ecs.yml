name: Deploy LoadTest To Amazon ECS

on:
  push:
    branches:
      - byron-loadtest
env:
  AWS_REGION: cn-north-1
  ECR_REPOSITORY: loadtest
  ECS_SERVICE: loadtestcms
  ECS_CLUSTER: load-testing
  ECS_TASK_DEFINITION: loadtest
  CONTAINER_NAME: loadtest
  GIT_TOKEN: ${{ secrets.PACKAGES_TOKEN }}
  LD_S3_BUCKET: ${{ secrets.LD_S3_BUCKET }}

jobs:
  build-to-ecr:
    if: github.event.pull_request.merged == true
    name: Build And Deploy ECS
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        persist-credentials: false

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Cache Go Modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Configure git credentials
      run: |
        git config --global url.https://$GIT_TOKEN@github.com/.insteadOf https://github.com/

    - name: Build
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o main -a -tags netgo -ldflags "-X github.com/KL-Engineering/kidsloop-cms-service/constant.GitHash=$(git rev-list -1 HEAD) -X github.com/KL-Engineering/kidsloop-cms-service/constant.BuildTimestamp=$(date +%s) -X github.com/KL-Engineering/kidsloop-cms-service/constant.LatestMigrate=$(ls schema/migrate | tail -1)"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.LD_ECR_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.LD_ECR_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Sync Keys To Local
      run: |
        aws s3 cp s3://$LD_S3_BUCKET/keys/ ./ --recursive --sse aws:kms

    - name: Build, tag, and push image to Amazon ECR
      shell: bash
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        BRANCH: ${{ github.ref_name }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH-${IMAGE_TAG::7} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH-${IMAGE_TAG::7}
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH-${IMAGE_TAG::7}"

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition  | jq -r 'del(
          .taskDefinitionArn,
          .requiresAttributes,
          .compatibilities,
          .revision,
          .status,
          .registeredAt,
          .registeredBy
        )' > task-definition.json
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
