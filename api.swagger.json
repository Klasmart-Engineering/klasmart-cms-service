{
  "openapi": "3.0.1",
  "info": {
    "title": "KidsLoop 2.0 Asset REST API",
    "description": "Kidsloop 2.0 Asset backend rest api",
    "version": "1.0.0",
    "contact": {
      "email": "peter.yang@badanamu.com.cn"
    }
  },
  "servers": [
    {
      "url": "http://127.0.0.1:12345/1.0",
      "description": "local dev"
    },
    {
      "url": "http://192.168.1.234:12345/1.0",
      "description": "local test"
    }
  ],
  "tags": [
    {
      "name": "asset",
      "description": "asset management"
    },
    {
      "name": "category",
      "description": "asset category management"
    },
    {
      "name": "tag",
      "description": "asset tag management"
    }
  ],
  "paths": {
    "/assets": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "query asset",
        "description": "query asset",
        "operationId": "queryAsset",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Search asset by id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search asset by name",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Search asset by category",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "size_min",
            "in": "query",
            "description": "Search asset by size_min",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 2
            }
          },
          {
            "name": "size_max",
            "in": "query",
            "description": "Search asset by size_max",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 1
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Search asset by tag",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page index, not paging if page <= 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 1
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "records per page, not paging if page_size <= 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 10
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by enum",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "create_at",
                "-create_at",
                "last_update_at",
                "-last_update_at"
              ],
              "nullable": true,
              "default": "create_at"
            },
            "required": false,
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "asset list",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "format": "int32",
                      "description": "total records",
                      "example": 1
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Asset"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "asset"
        ],
        "summary": "CreateAsset",
        "description": "CreateAsset",
        "operationId": "createAsset",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/assets/{asset_id}": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "GetAsset",
        "description": "GetAsset",
        "operationId": "getAsset",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "description": "AssetID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "asset"
        ],
        "summary": "update asset",
        "description": "update asset",
        "operationId": "updateAsset",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "description": "AssetID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "asset"
        ],
        "summary": "delete asset",
        "description": "delete asset",
        "operationId": "deleteAsset",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "description": "AssetID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/resources/upload/{ext}": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "GetAssetUploadPath",
        "description": "GetAssetUploadPath",
        "operationId": "getAssetUploadPath",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "ext",
            "in": "path",
            "description": "File Extension",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "category list",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "upload asset path",
                      "example": "https://badanamu.com/upload/bada.mp3"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/resources/path/{resource_name}": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "GetAssetResourcePath",
        "description": "GetAssetResourcePath",
        "operationId": "getAssetResourcePath",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "File path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "category list",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "upload asset path",
                      "example": "https://badanamu.com/upload/bada.mp3"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "query category",
        "description": "query category",
        "operationId": "queryCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Search category by ids",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "names",
            "in": "query",
            "description": "Search category by names",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page index, not paging if page <=0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 1
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "records per page, not paging if page_size <= 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 10
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by enum",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "create_at",
                "-create_at",
                "last_update_at",
                "last_update_at"
              ],
              "nullable": true,
              "default": "create_at"
            },
            "required": false,
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "category list",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "format": "int32",
                      "description": "total records",
                      "example": 1
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "category"
        ],
        "summary": "create category",
        "description": "create category",
        "operationId": "createCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "conflict"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/categories/{category_id}": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "get category",
        "description": "get category",
        "operationId": "getCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "CategoryID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "category"
        ],
        "summary": "update category",
        "description": "update category",
        "operationId": "updateCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "CategoryID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "category"
        ],
        "summary": "delete category",
        "description": "delete category",
        "operationId": "deleteCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "CategoryID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/tag": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "query tag",
        "description": "query tag",
        "operationId": "queryTag",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Search tag by name",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page index, not paging if page <= 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 1
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "records per page, not paging if page_size <= 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 10
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by enum",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "create_at",
                "-create_at"
              ],
              "nullable": true,
              "default": "create_at"
            },
            "required": false,
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "tag list",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "format": "int32",
                      "description": "total records",
                      "example": 1
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tag"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "tag"
        ],
        "summary": "create tag",
        "description": "Create Tag",
        "operationId": "createTag",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string",
                  "description": "tag id"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/tag/{tag_id}": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "get tag by id",
        "description": "get tag by id",
        "operationId": "GetTagByID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "tag id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "tag"
        ],
        "summary": "update tag",
        "description": "update tag",
        "operationId": "updateTag",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "tag id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "tag"
        ],
        "summary": "delete tag",
        "description": "delete tag",
        "operationId": "deleteTag",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "delete tag",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },

    "/schedules": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "query schedules",
        "description": "query schedules",
        "operationId": "queryschedules",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "teacherID",
            "in": "query",
            "description": "Search schedules by teacherID",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "lastKey",
            "in": "query",
            "description": "The key value of the last record",
            "schema": {
              "type": "string",
              "format": "string",
              "nullable": true,
              "default": ""
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "records per page, not paging if pageSize <= 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 10
            },
            "required": false,
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "schedule list",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "format": "int32",
                      "description": "total records",
                      "example": 1
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/schedule"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "schedule"
        ],
        "summary": "create schedule",
        "description": "Create schedule",
        "operationId": "createSchedule",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string",
                  "description": "schedule id"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/schedules/{schedule_id}": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "get schedules by id",
        "description": "get schedules by id",
        "operationId": "GetSchedulesByID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "schedule_id",
            "in": "path",
            "description": "schedule id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleDetailed"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "schedule"
        ],
        "summary": "update schedule",
        "description": "update schedule",
        "operationId": "updateSchedule",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "schedule_id",
            "in": "path",
            "description": "schedule id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string",
                  "description": "schedule id"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "schedule"
        ],
        "summary": "delete schedule",
        "description": "delete schedule",
        "operationId": "deleteSchedule",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "schedule_id",
            "in": "path",
            "description": "delete schedule",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "AssetCreateRequest": {
        "type": "object",
        "description": "Asset",
        "properties": {
          "name": {
            "type": "string",
            "description": "asset name",
            "example": "Asset #1"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "resource_name": {
            "type": "string",
            "example": "song.mp3"
          }
        }
      },
      "Asset": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AssetCreateRequest"
          },
          {
            "type": "object",
            "description": "Company",
            "properties": {
              "id": {
                "type": "string",
                "description": "AssetID",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "uploader": {
                "type": "string",
                "format": "int64",
                "description": "asset uploader",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "created_at": {
                "type": "integer",
                "format": "int64",
                "description": "create at timestamp in seconds",
                "example": 1595916114
              },
              "updated_at": {
                "type": "integer",
                "format": "int64",
                "description": "last updated at timestamp in seconds(秒)",
                "example": 1595916114
              }
            }
          }
        ]
      },
      "TagCreate": {
        "type": "object",
        "description": "create tag request",
        "properties": {
          "name": {
            "type": "string",
            "description": "tag name"
          }
        }
      },
      "TagUpdate": {
        "type": "object",
        "description": "update tag request",
        "properties": {
          "name": {
            "type": "string",
            "description": "tag name"
          },
          "states": {
            "type": "integer",
            "enum": [
              1,
              2
            ],
            "description": "\n * 1 - enable \n * 2 - disable\n"
          }
        }
      },
      "Tag": {
        "type": "object",
        "description": "Asset",
        "properties": {
          "id": {
            "type": "string",
            "description": "tag id"
          },
          "name": {
            "type": "string",
            "description": "tag name"
          },
          "states": {
            "type": "integer",
            "enum": [
              1,
              2
            ],
            "description": "\n * 1 - enable \n * 2 - disable\n"
          },
          "created_at": {
            "type": "integer",
            "description": "tag create time, timestamp"
          }
        }
      },
      "CategoryCreateRequest": {
        "type": "object",
        "description": "Asset",
        "properties": {
          "name": {
            "type": "string",
            "description": "category name",
            "example": "Category #1"
          },
          "parent_id": {
            "type": "string",
            "description": "parent category id"
          }
        }
      },
      "Category": {
        "type": "object",
        "description": "Category",
        "properties": {
          "id": {
            "type": "string",
            "description": "CategoryID",
            "example": "ede1995ebdb440ebb9526c53e07a9ff3"
          },
          "name": {
            "type": "string",
            "description": "asset name",
            "example": "Category #1"
          },
          "parent_id": {
            "type": "string",
            "description": "ParentCategoryID",
            "example": "ede1995ebdb440ebb9526c53e07a9ff3"
          }
        }
      },
      "Schedule": {
        "type": "object",
        "description": "schedule short info",
        "properties": {
          "id": {
            "type": "string",
            "description": "schedule id"
          },
          "title": {
            "type": "string",
            "description": "schedule title"
          },
          "start_at": {
            "type": "integer",
            "description": "schedule start time, timestamp"
          },
          "end_at": {
            "type": "integer",
            "description": "schedule end time, timestamp"
          },
          "lessonPlanID": {
            "type": "string",
            "description": "schedule lessonPlan id"
          },
          "lessonPlanName": {
            "type": "string",
            "description": "schedule lessonPlan name"
          },
          "teachers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Teacher"
            }
          }
        }
      },
      "Teacher": {
        "type": "object",
        "description": "teacher short info",
        "properties": {
          "id": {
            "type": "string",
            "description": "schedule teacher id"
          },
          "name": {
            "type": "string",
            "description": "schedule teacher name"
           }
         }
      },
      "ScheduleCreate": {
        "type":"object",
        "description": "schedule create info",
        "properties": {
          "title": {
            "type": "string",
            "description": "schedule title"
          },
          "class_id": {
            "type": "string",
            "description": "schedule class id"
          },
          "lesson_plan_id": {
            "type": "string",
            "description": "schedule lesson_plan_id"
          },
          "teacher_ids": {
            "type": "array",
            "items":{
              "type": "string"
            },
            "description": "schedule teacher_ids"
          },
          "start_at": {
            "type": "integer",
            "description": "schedule start time, timestamp"
          },
          "end_at": {
            "type": "integer",
            "description": "schedule end time, timestamp"
          },
          "mode_type": {
            "type": "string",
            "enum": [
              "AllDay",
              "Repeat"
            ],
            "description": "\n * AllDay - this class will last for 24 hours for the whole day \n * Repeat - repeat it daily/weekly/monthly/yearly \n"
          },
          "repeat": {
            "type": "object",
            "description": "repeat options, only work when mode_type equal Repeat,",
            "properties": {
              "type": {
                "type":"string",
                "enum": ["never", "after_count", "after_time"],
                "description": "repeat type"
              },
              "daily": {
                "type": "object",
                "description": "repeat daily options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval days"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              },
              "weekly": {
                "type": "object",
                "description": "repeat weekly options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval days"
                  },
                  "on": {
                    "type": "string",
                    "enum": ["sun", "mon", "tue", "wed", "thu","fri", "sat"],
                    "description": "on week"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              },
              "monthly": {
                "type": "object",
                "description": "repeat monthly options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval months"
                  },
                  "on_type": {
                    "type": "string",
                    "enum": ["date", "week"],
                    "description": "on type"
                  },
                  "on_date_day": {
                    "type": "integer",
                    "description": "on date day"
                  },
                  "on_week_seq": {
                    "type": "string",
                    "enum": ["first", "second", "third", "fourth", "last"],
                    "description": "on week seq"
                  },
                  "on_week": {
                    "type": "string",
                    "enum": ["sun", "mon", "tue", "wed", "thu","fri", "sat"],
                    "description": "on week"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              },
              "yearly": {
                "type": "object",
                "description": "repeat yearly options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval years (less or equal than 2 years)"
                  },
                  "on_type": {
                    "type": "string",
                    "enum": ["date", "week"],
                    "description": "on type"
                  },
                  "on_date_month": {
                    "type": "integer",
                    "description": "on date month"
                  },
                  "on_date_day": {
                    "type": "integer",
                    "description": "on date day"
                  },
                  "on_week_month": {
                    "type": "integer",
                    "description": "on week month"
                  },
                  "on_week_seq": {
                    "type": "string",
                    "enum": ["first", "second", "third", "fourth", "last"],
                    "description": "on week seq"
                  },
                  "on_week": {
                    "type": "string",
                    "enum": ["sun", "mon", "tue", "wed", "thu","fri", "sat"],
                    "description": "on week"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              }
            }
          },
          "subject_id": {
            "type": "string",
            "description": "schedule SubjectID"
          },
          "program_id": {
            "type": "string",
            "description": "schedule ProgramID"
          },
          "class_type": {
            "type": "string",
            "enum": [
              "OnlineClass",
              "OfflineClass",
              "Homework",
              "Task"
            ],
            "description": "schedule class_type"
          },
          "due_at": {
            "type": "integer",
            "description": "If I schedule the time as homework or task, then I should be able to set a due date. This is optional for me. The due date cannot be earlier than class end time."
          },
          "description": {
            "type": "string",
            "description": "schedule description"
          },
          "attachment_id": {
            "type": "string",
            "description": "schedule attachment id"
          }
        }
      },
      "ScheduleUpdate": {
        "type":"object",
        "description": "schedule create info",
        "properties": {
          "title": {
            "type": "string",
            "description": "schedule title"
          },
          "class_id": {
            "type": "string",
            "description": "schedule lessonPlan name"
          },
          "lesson_plan_id": {
            "type": "string",
            "description": "schedule title"
          },
          "teacher_ids": {
            "type": "array",
            "items":{
              "type": "string"
            },
            "description": "schedule lessonPlan name"
          },
          "start_at": {
            "type": "integer",
            "description": "schedule start time, timestamp"
          },
          "end_at": {
            "type": "integer",
            "description": "schedule end time, timestamp"
          },
          "mode_type": {
            "type": "string",
            "enum": [
              "AllDay",
              "Repeat"
            ],
            "description": "\n * AllDay - this class will last for 24 hours for the whole day \n * Repeat - repeat it daily/weekly/monthly/yearly \n"
          },
          "repeat_edit_options": {
            "type": "string",
            "enum": ["only_current", "with_following"],
            "description": "repeat edit option"
          },
          "subject_id": {
            "type": "string",
            "description": "schedule SubjectID"
          },
          "program_id": {
            "type": "string",
            "description": "schedule ProgramID"
          },
          "class_type": {
            "type": "string",
            "enum": [
              "OnlineClass",
              "OfflineClass",
              "Homework",
              "Task"
            ],
            "description": "schedule class_type"
          },
          "due_at": {
            "type": "integer",
            "description": "If I schedule the time as homework or task, then I should be able to set a due date. This is optional for me. The due date cannot be earlier than class end time."
          },
          "description": {
            "type": "string",
            "description": "schedule description"
          },
          "attachment_id": {
            "type": "string",
            "description": "schedule attachment id"
          }
        }
      },
      "ScheduleDetailed": {
        "type":"object",
        "description": "schedule create info",
        "properties": {
          "id": {
            "type": "string",
            "description": "schedule id"
          },
          "title": {
            "type": "string",
            "description": "schedule title"
          },
          "class_info": {
            "type": "object",
            "description": "schedule class info",
            "properties": {
              "id": {
                "type": "string",
                "description": "schedule class id"
              },
              "name": {
                "type": "string",
                "description": "schedule class name"
              }
            }
          },
          "lesson_plan_info": {
            "type": "object",
            "description": "schedule lesson plan info",
            "properties": {
              "id": {
                "type": "string",
                "description": "schedule lesson plan id"
              },
              "name": {
                "type": "string",
                "description": "schedule lesson plan name"
              }
            }
          },
          "teacher_infos": {
            "teachers": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Teacher"
              }
            }
          },
          "start_at": {
            "type": "integer",
            "description": "schedule start time, timestamp"
          },
          "end_at": {
            "type": "integer",
            "description": "schedule end time, timestamp"
          },
          "mode_type": {
            "type": "string",
            "enum": [
              "AllDay",
              "Repeat"
            ],
            "description": "\n * AllDay - this class will last for 24 hours for the whole day \n * Repeat - repeat it daily/weekly/monthly/yearly \n"
          },
          "subject_info": {
            "type": "object",
            "description": "schedule subject info",
            "properties": {
              "id": {
                "type": "string",
                "description": "schedule subject_id"
              },
              "name": {
                "type": "string",
                "description": "schedule subject_name"
              }
            }
          },
          "program_info": {
            "type": "object",
            "description": "schedule program info",
            "properties": {
              "id": {
                "type": "string",
                "description": "schedule ProgramID"
              },
              "name": {
                "type": "string",
                "description": "schedule program_name"
              }
            }
          },
          "class_type": {
            "type": "string",
            "enum": [
              "OnlineClass",
              "OfflineClass",
              "Homework",
              "Task"
            ],
            "description": "schedule class_type"
          },
          "due_at": {
            "type": "integer",
            "description": "If I schedule the time as homework or task, then I should be able to set a due date. This is optional for me. The due date cannot be earlier than class end time."
          },
          "description": {
            "type": "string",
            "description": "schedule description"
          },
          "attachment_info": {
            "type": "object",
            "description": "schedule attachment info",
            "properties": {
              "id": {
                "type": "string",
                "description": "schedule attachment id"
              },
              "name": {
                "type": "string",
                "description": "schedule attachment name"
              }
            }
          }
        }
      },
      "RepeatEnd": {
        "type": "object",
        "description": "repeat end options",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["never", "after_count", "after_time"]
          },
          "after_count": {
            "type": "integer",
            "description": "end after N count"
          },
          "after_time": {
            "type": "integer",
            "description": "end after the time(unix timestamp)"
          }
        }
      }
    }
  }
}