{
  "openapi": "3.0.1",
  "info": {
    "title": "KidsLoop 2.0 REST API",
    "description": "KidsLoop 2.0 backend rest api",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:12345/v1",
      "description": "dev"
    },
    {
      "url": "https://cp03fzjc58.execute-api.ap-northeast-2.amazonaws.com/v1",
      "description": "temp test"
    },
    {
      "url": "https://kl2-test.kidsloop.net/v1",
      "description": "test"
    }
  ],
  "tags": [
    {
      "name": "content",
      "description": "content management"
    },
    {
      "name": "schedule",
      "description": "schedule management"
    },
    {
      "name": "asset",
      "description": "asset management"
    },
    {
      "name": "category",
      "description": "asset category management"
    },
    {
      "name": "tag",
      "description": "asset tag management"
    }
  ],
  "paths": {
    "/contents": {
      "get": {
        "tags": [
          "content"
        ],
        "description": "Search content with condition",
        "operationId": "searchContents",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Search content by name",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "content_type",
            "in": "query",
            "description": "Search content by content type",
            "schema": {
              "type": "string",
              "enum":["1", "2", "3"],
              "nullable": true
            }
          },
          {
            "name": "publish_status",
            "in": "query",
            "description": "Search content by publish status",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Search content by scope",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Search content by author",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "org",
            "in": "query",
            "description": "Search content by org",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Search page",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Search page size",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Search order by, default with content_name",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "-id",
                "created_at",
                "-created_at",
                "updated_at",
                "-updated_at",
                "content_name",
                "-content_name"
              ],
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "content list",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "search key"
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Content"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "content"
        ],
        "description": "Create content",
        "operationId": "createContent",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "content info",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "content id",
                      "example": "1"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/contents/{content_id}/publish": {
      "put": {
        "tags": [
          "content"
        ],
        "description": "Publish content",
        "operationId": "publishContent",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "description": "content id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishContentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "406": {
            "description": "Content status invalid"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/contents/{content_id}/lock": {
      "put": {
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "description": "content id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "description": "Lock a content by content_id",
        "operationId": "lockContent",
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$ref": "#/components/schemas/LockContentResponse"
                }
              }
            }
          },
          "403": {
            "description": "no auth to review"
          },
          "406": {
            "description": "content was locked"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/contents_review/{content_id}/approve": {
      "put": {
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "description": "content id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "description": "Approve a content review by content_id",
        "operationId": "approveContentReview",
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "description": "no auth to review"
          },
          "412": {
            "description": "content status invalid"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/contents_review/{content_id}/reject": {
      "put": {
        "tags": [
          "content"
        ],
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "description": "content id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "description": "Reject a content review by content_id",
        "operationId": "rejectContentReview",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectReasonRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "403": {
            "description": "no auth to review"
          },
          "412": {
            "description": "content status invalid"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/contents/{content_id}": {
      "get": {
        "tags": [
          "content"
        ],
        "description": "Get content by content_id",
        "operationId": "getContentById",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "description": "content id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "content info",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Content"
                }
              }
            }
          },
          "404": {
            "description": "Content not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "content"
        ],
        "description": "Update content by content_id",
        "operationId": "updateContent",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "description": "content id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Content not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "content"
        ],
        "description": "Delete content by content_id",
        "operationId": "deleteContent",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Content not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/contents_dynamo": {
      "get": {
        "tags": [
          "content"
        ],
        "description": "Search user's private content with condition",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Search content by name",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "publish_status",
            "in": "query",
            "description": "Search content by publish status",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "pending",
                "published",
                "rejected",
                "archive"
              ],
              "nullable": true
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Search content by author",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "content_type",
            "in": "query",
            "description": "Search content by content type",
            "schema": {
              "type": "string",
              "enum":["1", "2", "3"],
              "nullable": true
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Search content by description",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "keywords",
            "in": "query",
            "description": "Search content by keywords",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "org",
            "in": "query",
            "description": "Search content by org",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "Search key",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "content list",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "search key"
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Content"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/contents_bulk/publish": {
      "put": {
        "tags": [
          "content"
        ],
        "description": "Publish content bulk",
        "operationId": "publishContentBulk",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentIDListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/contents_bulk": {
      "delete": {
        "tags": [
          "content"
        ],
        "description": "Delete content bulk",
        "operationId": "deleteContentBulk",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentIDListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/contents_private": {
      "get": {
        "tags": [
          "content"
        ],
        "description": "Search user's private content with condition",
        "operationId": "searchPrivateContents",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Search content by name",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "content_type",
            "in": "query",
            "description": "Search content by content type",
            "schema": {
              "type": "string",
              "enum":["1", "2", "3"],
              "nullable": true
            }
          },
          {
            "name": "publish_status",
            "in": "query",
            "description": "Search content by publish status",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "pending",
                "published",
                "rejected",
                "archive"
              ],
              "nullable": true
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Search content by scope",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Search content by author",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "org",
            "in": "query",
            "description": "Search content by org",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Search page",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Search page size",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Search order by",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "-id",
                "created_at",
                "-created_at",
                "updated_at",
                "-updated_at",
                "content_name",
                "-content_name"
              ],
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "content list",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "search result total"
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Content"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/contents_pending": {
      "get": {
        "tags": [
          "content"
        ],
        "description": "Search pending content",
        "operationId": "searchPendingContents",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Search content by name",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "content_type",
            "in": "query",
            "description": "Search content by content type",
            "schema": {
              "type": "string",
              "enum":["1", "2", "3"],
              "nullable": true
            }
          },
          {
            "name": "publish_status",
            "in": "query",
            "description": "Search content by publish status",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "pending",
                "published",
                "rejected",
                "archive"
              ],
              "nullable": true
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Search content by scope",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "Search content by author",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "org",
            "in": "query",
            "description": "Search content by org",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Search page",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Search page size",
            "schema": {
              "type": "integer",
              "nullable": true
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Search order by",
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "-id",
                "created_at",
                "-created_at",
                "updated_at",
                "-updated_at",
                "content_name",
                "-content_name"
              ],
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "content list",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "search result total"
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Content"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/contents_resources/{resource_id}": {
      "get": {
        "tags": [
          "content"
        ],
        "description": "Get content resource path",
        "operationId": "getContentResourcePath",
        "parameters": [
          {
            "name": "resource_id",
            "in": "param",
            "description": "Resource id",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/contents_resources": {
      "get": {
        "tags": [
          "content"
        ],
        "description": "Get content resource upload path",
        "operationId": "getContentResourceUploadPath",
        "parameters": [
          {
            "name": "partition",
            "in": "query",
            "description": "Resource partition",
            "schema": {
              "type": "string",
              "enum": [
                "assets",
                "thumbnail",
                "attachment"
              ],
              "nullable": false
            }
          },
          {
            "name": "extension",
            "in": "query",
            "description": "Resource extension",
            "schema": {
              "type": "string",
              "nullable": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "resource path info",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "resource path"
                    },
                    "resource_id": {
                      "type": "string",
                      "description": "resource id"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/assets": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "query asset",
        "description": "query asset",
        "operationId": "queryAsset",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Search asset by id",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Search asset by name",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Search asset by category",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "size_min",
            "in": "query",
            "description": "Search asset by size_min",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 2
            }
          },
          {
            "name": "size_max",
            "in": "query",
            "description": "Search asset by size_max",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 1
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Search asset by tag",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page index, not paging if page <= 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 1
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "records per page, not paging if page_size <= 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 10
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by enum",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "create_at",
                "-create_at",
                "last_update_at",
                "-last_update_at"
              ],
              "nullable": true,
              "default": "create_at"
            },
            "required": false,
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "asset list",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "format": "int32",
                      "description": "total records",
                      "example": 1
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Asset"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "asset"
        ],
        "summary": "CreateAsset",
        "description": "CreateAsset",
        "operationId": "createAsset",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/assets/{asset_id}": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "GetAsset",
        "description": "GetAsset",
        "operationId": "getAsset",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "description": "AssetID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "asset"
        ],
        "summary": "update asset",
        "description": "update asset",
        "operationId": "updateAsset",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "description": "AssetID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asset"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "asset"
        ],
        "summary": "delete asset",
        "description": "delete asset",
        "operationId": "deleteAsset",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "description": "AssetID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/assets/{ext}/upload": {
      "get": {
        "tags": [
          "asset"
        ],
        "summary": "GetAssetUploadPath",
        "description": "GetAssetUploadPath",
        "operationId": "getAssetUploadPath",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "ext",
            "in": "path",
            "description": "File Extension",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "category list",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "upload asset path",
                      "example": "https://badanamu.com/upload/bada.mp3"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "query category",
        "description": "query category",
        "operationId": "queryCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Search category by ids",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "names",
            "in": "query",
            "description": "Search category by names",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page index, not paging if page <=0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 1
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "records per page, not paging if page_size <= 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 10
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by enum",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "create_at",
                "-create_at",
                "last_update_at",
                "last_update_at"
              ],
              "nullable": true,
              "default": "create_at"
            },
            "required": false,
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "category list",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "format": "int32",
                      "description": "total records",
                      "example": 1
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "category"
        ],
        "summary": "create category",
        "description": "create category",
        "operationId": "createCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "conflict"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/categories/{category_id}": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "get category",
        "description": "get category",
        "operationId": "getCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "CategoryID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "category"
        ],
        "summary": "update category",
        "description": "update category",
        "operationId": "updateCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "CategoryID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "category"
        ],
        "summary": "delete category",
        "description": "delete category",
        "operationId": "deleteCategory",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "CategoryID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/tag": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "query tag",
        "description": "query tag",
        "operationId": "queryTag",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Search tag by name",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page index, not paging if page <= 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 1
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "records per page, not paging if page_size <= 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 10
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by enum",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "-name",
                "create_at",
                "-create_at"
              ],
              "nullable": true,
              "default": "create_at"
            },
            "required": false,
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "tag list",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "format": "int32",
                      "description": "total records",
                      "example": 1
                    },
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Tag"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "tag"
        ],
        "summary": "create tag",
        "description": "Create Tag",
        "operationId": "createTag",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "string",
                  "description": "tag id"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/tag/{tag_id}": {
      "get": {
        "tags": [
          "tag"
        ],
        "summary": "get tag by id",
        "description": "get tag by id",
        "operationId": "GetTagByID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "tag id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "tag"
        ],
        "summary": "update tag",
        "description": "update tag",
        "operationId": "updateTag",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "tag id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "tag"
        ],
        "summary": "delete tag",
        "description": "delete tag",
        "operationId": "deleteTag",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "delete tag",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/schedules": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "query schedules",
        "description": "query schedules",
        "operationId": "querySchedules",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "teacher_name",
            "in": "query",
            "description": "Search schedules by teacher_name",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "time_zone",
            "in": "query",
            "description": "time zone",
            "example": "Asia/Shanghai",
            "schema": {
              "type": "string",
              "format": "string",
              "nullable": true,
              "default": ""
            },
            "required": true,
            "allowEmptyValue": false
          },
          {
            "name": "start_at",
            "in": "query",
            "description": "Search schedules by start_at",
            "schema": {
              "type": "integer",
              "nullable": true,
              "default": "datetime now"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by enum",
            "schema": {
              "type": "string",
              "enum": [
                "create_at",
                "-create_at",
                "start_at",
                "-start_at"
              ],
              "nullable": true,
              "default": "start_at"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page index, not paging if page <=0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 1
            },
            "required": false,
            "allowEmptyValue": true
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "records per page, not paging if page_size <= 0",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "default": 10
            },
            "required": false,
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "schedule list",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "format": "int32",
                      "description": "total records",
                      "example": 1
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Schedule"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "tags": [
          "schedule"
        ],
        "summary": "create schedule",
        "description": "Create schedule",
        "operationId": "createSchedule",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "new schedule id",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "string",
                      "description": "new schedule id"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/schedules_time_view": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "query schedules time view",
        "description": "query schedules",
        "operationId": "schedules_time_view",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "view_type",
            "in": "query",
            "description": "Search schedules by view_type",
            "schema": {
              "enum": [
                "day",
                "workWeek",
                "week",
                "month"
              ],
              "type": "string",
              "nullable": false
            }
          },
          {
            "name": "time_at",
            "in": "query",
            "description": "Search schedules by time_at",
            "schema": {
              "type": "string",
              "format": "string",
              "nullable": true,
              "default": ""
            },
            "required": true,
            "allowEmptyValue": false
          },
          {
            "name": "time_zone",
            "in": "query",
            "description": "time zone",
            "example": "Asia/Shanghai",
            "schema": {
              "type": "string",
              "format": "string",
              "nullable": true,
              "default": ""
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "schedule list",
                  "properties": {
                    "list": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ScheduleTimeView"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/schedules/{schedule_id}": {
      "get": {
        "tags": [
          "schedule"
        ],
        "summary": "get schedules by id",
        "description": "get schedules by id",
        "operationId": "GetSchedulesByID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "schedule_id",
            "in": "path",
            "description": "schedule id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleDetailed"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "schedule"
        ],
        "summary": "update schedule",
        "description": "update schedule",
        "operationId": "updateSchedule",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "schedule_id",
            "in": "path",
            "description": "schedule id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "new schedule id",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "string",
                      "description": "new schedule id"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "schedule"
        ],
        "summary": "delete schedule",
        "description": "delete schedule",
        "operationId": "deleteSchedule",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "schedule_id",
            "in": "path",
            "description": "delete schedule",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowEmptyValue": false
          },
          {
            "name": "repeat_edit_options",
            "in": "query",
            "description": "repeat edit option",
            "schema": {
              "type": "string",
              "enum": [
                "only_current",
                "with_following"
              ],
              "nullable": true,
              "description": "repeat edit option"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "User not login"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Recorde not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "AssetCreateRequest": {
        "type": "object",
        "description": "Asset",
        "properties": {
          "name": {
            "type": "string",
            "description": "asset name",
            "example": "Asset #1"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "url": {
            "type": "string",
            "example": "https://badanamu.com/song.mp3"
          }
        }
      },
      "CreateContentRequest": {
        "allOf": [
          {
            "type": "object",
            "description": "Company",
            "properties": {
              "content_type": {
                "type": "integer",
                "format": "int64",
                "description": "content type",
                "enum":[1,2,3],
                "example": 1
              },
              "name": {
                "type": "string",
                "description": "content name",
                "example": "Content title"
              },
              "program": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "program id",
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "subject": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "subject id",
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "reject_reason": {
                "type": "string",
                "description": "reject reason",
                "example": "reject reason"
              },
              "developmental": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "developmental id",
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "skills": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "skills id",
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "age": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "age id",
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "grade": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "grade id",
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "suggest_time": {
                "type": "integer",
                "description": "suggest time",
                "example": 1
              },
              "keywords": {
                "type": "array",
                "description": "keywords id",
                "items": {
                  "type": "string"
                },
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "description": {
                "type": "string",
                "description": "content description",
                "example": "Content description"
              },
              "thumbnail": {
                "type": "string",
                "description": "content thumbnail",
                "example": "Content thumbnail"
              },
              "data": {
                "type": "string",
                "description": "content data",
                "example": "{\"source\": \"ede1995ebdb440ebb9526c53e07a9ff3.jpg\"}"
              },
              "extra": {
                "type": "string",
                "description": "content extra data",
                "example": "{\"data\": \"hello\"}"
              },
              "publish_scope": {
                "type": "string",
                "description": "content publish scope id",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              }
            }
          }
        ]
      },
      "PublishContentRequest": {
        "allOf": [
          {
            "type": "object",
            "description": "Company",
            "properties": {
              "scope": {
                "type": "string",
                "description": "content published scope list",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              }
            }
          }
        ]
      },
      "ContentIDListRequest": {
        "allOf": [
          {
            "type": "object",
            "description": "Company",
            "properties": {
              "id": {
                "type": "array",
                "description": "content id list",
                "items": {
                  "type": "string"
                },
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              }
            }
          }
        ]
      },
      "RejectReasonRequest": {
        "allOf": [
          {
            "type": "object",
            "description": "Reject reason",
            "properties": {
              "reject_reason": {
                "type": "string",
                "description": "content reject reason"
              }
            }
          }
        ]
      },
      "LockContentResponse": {
        "allOf": [
          {
            "type": "object",
            "description": "Lock content response",
            "properties": {
              "id": {
                "type": "string",
                "description": "content id to edit"
              }
            }
          }
        ]
      },
      "ContentCondition": {
        "allOf": [
          {
            "type": "object",
            "description": "Company",
            "properties": {
              "content_type": {
                "type": "string",
                "description": "content type list",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3",
                "enum":["1","2","3"]
              },
              "scope": {
                "type": "string",
                "description": "content published scope list",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "publish_status": {
                "type": "string",
                "enum": [
                  "draft",
                  "pending",
                  "published",
                  "rejected",
                  "archive"
                ],
                "description": "content published status list",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "author": {
                "type": "string",
                "description": "content author id",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "org": {
                "type": "string",
                "description": "content org id",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "bookmark": {
                "type": "string",
                "description": "content bookmark",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              }
            }
          }
        ]
      },
      "Content": {
        "allOf": [
          {
            "type": "object",
            "description": "Company",
            "properties": {
              "id": {
                "type": "string",
                "description": "content id",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "content_type": {
                "type": "integer",
                "format": "int64",
                "description": "content type",
                "example": 1,
                "enum":[1,2,3]
              },
              "name": {
                "type": "string",
                "description": "content name",
                "example": "Content title"
              },
              "program": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "program id",
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "subject": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "subject id",
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "suggest_time": {
                "type": "integer",
                "description": "suggest time",
                "example": 1
              },
              "reject_reason": {
                "type": "string",
                "description": "reject reason",
                "example": "reject reason"
              },
              "developmental": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "developmental id",
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "skills": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "skills id",
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "age": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "age id",
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "grade": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "grade id",
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "keywords": {
                "type": "array",
                "description": "keywords id",
                "items": {
                  "type": "string"
                },
                "example": [
                  "ede1995ebdb440ebb9526c53e07a9ff3"
                ]
              },
              "description": {
                "type": "string",
                "description": "content description",
                "example": "Content description"
              },
              "thumbnail": {
                "type": "string",
                "description": "content thumbnail",
                "example": "Content thumbnail"
              },
              "version": {
                "type": "integer",
                "format": "int64",
                "description": "content version",
                "example": 1
              },
              "source_id": {
                "type": "string",
                "description": "content source id",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "locked_by": {
                "type": "string",
                "description": "content locked by others id",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "data": {
                "type": "string",
                "description": "content data",
                "example": "{\"source\": \"ede1995ebdb440ebb9526c53e07a9ff3.jpg\"}"
              },
              "extra": {
                "type": "string",
                "description": "content extra data",
                "example": {
                  "data": "hello"
                }
              },
              "author": {
                "type": "string",
                "description": "content author id",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "author_name": {
                "type": "string",
                "description": "content author name",
                "example": "zhangsan"
              },
              "org": {
                "type": "string",
                "description": "content org id",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "publish_scope": {
                "type": "string",
                "description": "content publish scope id",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "publish_status": {
                "type": "string",
                "description": "content publish status",
                "enum": [
                  "draft",
                  "pending",
                  "published",
                  "rejected",
                  "archive"
                ],
                "example": "published"
              },
              "content_type_name": {
                "type": "string",
                "description": "content type name",
                "example": "lesson"
              },
              "program_name": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "program name",
                "example": [
                  "program1"
                ]
              },
              "grade_name": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "grade name",

                "example": [
                  "program1"
                ]
              },
              "subject_name": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "subject name",
                "example": [
                  "subject1"
                ]
              },
              "developmental_name": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "developmental name",
                "example": [
                  "developmental"
                ]
              },
              "skills_name": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "skills name",
                "example": [
                  "skills"
                ]
              },
              "age_name": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "age name",
                "example": [
                  "age"
                ]
              },
              "org_name": {
                "type": "string",
                "description": "org name",
                "example": "school1"
              },
              "created_at": {
                "type": "integer",
                "description": "content create time",
                "example": 123
              }
            }
          }
        ]
      },
      "Asset": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AssetCreateRequest"
          },
          {
            "type": "object",
            "description": "Company",
            "properties": {
              "id": {
                "type": "string",
                "description": "AssetID",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "uploader": {
                "type": "string",
                "format": "int64",
                "description": "asset uploader",
                "example": "ede1995ebdb440ebb9526c53e07a9ff3"
              },
              "created_at": {
                "type": "integer",
                "format": "int64",
                "description": "create at timestamp in seconds",
                "example": 1595916114
              },
              "updated_at": {
                "type": "integer",
                "format": "int64",
                "description": "last updated at timestamp in seconds(秒)",
                "example": 1595916114
              }
            }
          }
        ]
      },
      "TagCreate": {
        "type": "object",
        "description": "create tag request",
        "properties": {
          "name": {
            "type": "string",
            "description": "tag name"
          }
        }
      },
      "TagUpdate": {
        "type": "object",
        "description": "update tag request",
        "properties": {
          "name": {
            "type": "string",
            "description": "tag name"
          },
          "states": {
            "type": "integer",
            "enum": [
              1,
              2
            ],
            "description": "\n * 1 - enable \n * 2 - disable\n"
          }
        }
      },
      "Tag": {
        "type": "object",
        "description": "Asset",
        "properties": {
          "id": {
            "type": "string",
            "description": "tag id"
          },
          "name": {
            "type": "string",
            "description": "tag name"
          },
          "states": {
            "type": "integer",
            "enum": [
              1,
              2
            ],
            "description": "\n * 1 - enable \n * 2 - disable\n"
          },
          "created_at": {
            "type": "integer",
            "description": "tag create time, timestamp"
          }
        }
      },
      "CategoryCreateRequest": {
        "type": "object",
        "description": "Asset",
        "properties": {
          "name": {
            "type": "string",
            "description": "category name",
            "example": "Category #1"
          },
          "parent_id": {
            "type": "string",
            "description": "parent category id"
          }
        }
      },
      "Category": {
        "type": "object",
        "description": "Category",
        "properties": {
          "id": {
            "type": "string",
            "description": "CategoryID",
            "example": "ede1995ebdb440ebb9526c53e07a9ff3"
          },
          "name": {
            "type": "string",
            "description": "asset name",
            "example": "Category #1"
          },
          "parent_id": {
            "type": "string",
            "description": "ParentCategoryID",
            "example": "ede1995ebdb440ebb9526c53e07a9ff3"
          }
        }
      },
      "Schedule": {
        "type": "object",
        "description": "schedule short info",
        "properties": {
          "id": {
            "type": "string",
            "description": "schedule id"
          },
          "title": {
            "type": "string",
            "description": "schedule title"
          },
          "start_at": {
            "type": "integer",
            "description": "schedule start time, timestamp"
          },
          "end_at": {
            "type": "integer",
            "description": "schedule end time, timestamp"
          },
          "lesson_plan": {
            "$ref": "#/components/schemas/CommonShort"
          },
          "program": {
            "$ref": "#/components/schemas/CommonShort"
          },
          "subject": {
            "$ref": "#/components/schemas/CommonShort"
          },
          "class": {
            "$ref": "#/components/schemas/CommonShort"
          },
          "teachers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommonShort"
            }
          }
        }
      },
      "ScheduleTimeView": {
        "type": "object",
        "description": "schedule home short info",
        "properties": {
          "id": {
            "type": "string",
            "description": "schedule id"
          },
          "title": {
            "type": "string",
            "description": "schedule title"
          },
          "start_at": {
            "type": "integer",
            "description": "schedule start time, timestamp"
          },
          "end_at": {
            "type": "integer",
            "description": "schedule end time, timestamp"
          },
          "is_repeat":{
            "type": "boolean",
            "description": "If true, schedule is repeat"
          }
        }
      },
      "ScheduleCreate": {
        "type": "object",
        "description": "schedule create info",
        "properties": {
          "title": {
            "type": "string",
            "description": "schedule title"
          },
          "class_id": {
            "type": "string",
            "description": "schedule class id"
          },
          "lesson_plan_id": {
            "type": "string",
            "description": "schedule lesson_plan_id"
          },
          "teacher_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "schedule teacher_ids"
          },
          "start_at": {
            "type": "integer",
            "description": "schedule start time, timestamp"
          },
          "end_at": {
            "type": "integer",
            "description": "schedule end time, timestamp"
          },
          "repeat": {
            "type": "object",
            "description": "repeat options, only work when mode_type equal Repeat,",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "daily",
                  "weekly",
                  "monthly",
                  "yearly"
                ],
                "description": "repeat type"
              },
              "daily": {
                "type": "object",
                "description": "repeat daily options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval days"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              },
              "weekly": {
                "type": "object",
                "description": "repeat weekly options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval days"
                  },
                  "on": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday"
                      ]
                    },
                    "description": "on weekdays"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              },
              "monthly": {
                "type": "object",
                "description": "repeat monthly options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval months"
                  },
                  "on_type": {
                    "type": "string",
                    "enum": [
                      "date",
                      "week"
                    ],
                    "description": "on type"
                  },
                  "on_date_day": {
                    "type": "integer",
                    "description": "on date day"
                  },
                  "on_week_seq": {
                    "type": "string",
                    "enum": [
                      "first",
                      "second",
                      "third",
                      "fourth",
                      "last"
                    ],
                    "description": "on week seq"
                  },
                  "on_week": {
                    "type": "string",
                    "enum": [
                      "Sunday",
                      "Monday",
                      "Tuesday",
                      "Wednesday",
                      "Thursday",
                      "Friday",
                      "Saturday"
                    ],
                    "description": "on week"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              },
              "yearly": {
                "type": "object",
                "description": "repeat yearly options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval years (less or equal than 2 years)"
                  },
                  "on_type": {
                    "type": "string",
                    "enum": [
                      "date",
                      "week"
                    ],
                    "description": "on type"
                  },
                  "on_date_month": {
                    "type": "integer",
                    "description": "on date month"
                  },
                  "on_date_day": {
                    "type": "integer",
                    "description": "on date day"
                  },
                  "on_week_month": {
                    "type": "integer",
                    "description": "on week month"
                  },
                  "on_week_seq": {
                    "type": "string",
                    "enum": [
                      "first",
                      "second",
                      "third",
                      "fourth",
                      "last"
                    ],
                    "description": "on week seq"
                  },
                  "on_week": {
                    "type": "string",
                    "enum": [
                      "Sunday",
                      "Monday",
                      "Tuesday",
                      "Wednesday",
                      "Thursday",
                      "Friday",
                      "Saturday"
                    ],
                    "description": "on week"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              }
            }
          },
          "subject_id": {
            "type": "string",
            "description": "schedule SubjectID"
          },
          "program_id": {
            "type": "string",
            "description": "schedule ProgramID"
          },
          "class_type": {
            "type": "string",
            "enum": [
              "OnlineClass",
              "OfflineClass",
              "Homework",
              "Task"
            ],
            "description": "schedule class_type"
          },
          "due_at": {
            "type": "integer",
            "description": "If I schedule the time as homework or task, then I should be able to set a due date. This is optional for me. The due date cannot be earlier than class end time."
          },
          "description": {
            "type": "string",
            "description": "schedule description"
          },
          "attachment": {
            "$ref": "#/components/schemas/CommonShort"
          },
          "is_force": {
            "type": "boolean",
            "description": "If true, skip the conflict detection"
          },
          "is_repeat": {
            "type": "boolean",
            "description": "If true, schedule will repeat"
          },
          "is_all_day": {
            "type": "boolean",
            "description": "all_day flag"
          },
          "time_zone": {
            "type": "string",
            "description": "time zone"
          }
        }
      },
      "ScheduleUpdate": {
        "type": "object",
        "description": "schedule create info",
        "properties": {
          "title": {
            "type": "string",
            "description": "schedule title"
          },
          "class_id": {
            "type": "string",
            "description": "schedule lessonPlan name"
          },
          "lesson_plan_id": {
            "type": "string",
            "description": "schedule title"
          },
          "teacher_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "schedule lessonPlan name"
          },
          "start_at": {
            "type": "integer",
            "description": "schedule start time, timestamp"
          },
          "end_at": {
            "type": "integer",
            "description": "schedule end time, timestamp"
          },
          "repeat_edit_options": {
            "type": "string",
            "enum": [
              "only_current",
              "with_following"
            ],
            "description": "repeat edit option"
          },
          "repeat": {
            "type": "object",
            "description": "repeat options, only work when mode_type equal Repeat,",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "daily",
                  "weekly",
                  "monthly",
                  "yearly"
                ],
                "description": "repeat type"
              },
              "daily": {
                "type": "object",
                "description": "repeat daily options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval days"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              },
              "weekly": {
                "type": "object",
                "description": "repeat weekly options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval days"
                  },
                  "on": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday"
                      ]
                    },
                    "description": "on weekdays"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              },
              "monthly": {
                "type": "object",
                "description": "repeat monthly options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval months"
                  },
                  "on_type": {
                    "type": "string",
                    "enum": [
                      "date",
                      "week"
                    ],
                    "description": "on type"
                  },
                  "on_date_day": {
                    "type": "integer",
                    "description": "on date day"
                  },
                  "on_week_seq": {
                    "type": "string",
                    "enum": [
                      "first",
                      "second",
                      "third",
                      "fourth",
                      "last"
                    ],
                    "description": "on week seq"
                  },
                  "on_week": {
                    "type": "string",
                    "enum": [
                      "Sunday",
                      "Monday",
                      "Tuesday",
                      "Wednesday",
                      "Thursday",
                      "Friday",
                      "Saturday"
                    ],
                    "description": "on week"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              },
              "yearly": {
                "type": "object",
                "description": "repeat yearly options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval years (less or equal than 2 years)"
                  },
                  "on_type": {
                    "type": "string",
                    "enum": [
                      "date",
                      "week"
                    ],
                    "description": "on type"
                  },
                  "on_date_month": {
                    "type": "integer",
                    "description": "on date month"
                  },
                  "on_date_day": {
                    "type": "integer",
                    "description": "on date day"
                  },
                  "on_week_month": {
                    "type": "integer",
                    "description": "on week month"
                  },
                  "on_week_seq": {
                    "type": "string",
                    "enum": [
                      "first",
                      "second",
                      "third",
                      "fourth",
                      "last"
                    ],
                    "description": "on week seq"
                  },
                  "on_week": {
                    "type": "string",
                    "enum": [
                      "Sunday",
                      "Monday",
                      "Tuesday",
                      "Wednesday",
                      "Thursday",
                      "Friday",
                      "Saturday"
                    ],
                    "description": "on week"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              }
            }
          },
          "subject_id": {
            "type": "string",
            "description": "schedule SubjectID"
          },
          "program_id": {
            "type": "string",
            "description": "schedule ProgramID"
          },
          "class_type": {
            "type": "string",
            "enum": [
              "OnlineClass",
              "OfflineClass",
              "Homework",
              "Task"
            ],
            "description": "schedule class_type"
          },
          "due_at": {
            "type": "integer",
            "description": "If I schedule the time as homework or task, then I should be able to set a due date. This is optional for me. The due date cannot be earlier than class end time."
          },
          "description": {
            "type": "string",
            "description": "schedule description"
          },
          "attachment": {
            "$ref": "#/components/schemas/CommonShort"
          },
          "is_force": {
            "type": "boolean",
            "description": "If true, skip the conflict detection"
          },
          "is_repeat": {
            "type": "boolean",
            "description": "If true, schedule will repeat"
          },
          "is_all_day": {
            "type": "boolean",
            "description": "all_day flag"
          },
          "time_zone": {
            "type": "string",
            "description": "time zone"
          }
        }
      },
      "ScheduleDetailed": {
        "type": "object",
        "description": "schedule create info",
        "properties": {
          "id": {
            "type": "string",
            "description": "schedule id"
          },
          "title": {
            "type": "string",
            "description": "schedule title"
          },
          "class": {
            "$ref": "#/components/schemas/CommonShort"
          },
          "lesson_plan": {
            "$ref": "#/components/schemas/CommonShort"
          },
          "teachers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommonShort"
            }
          },
          "start_at": {
            "type": "integer",
            "description": "schedule start time, timestamp"
          },
          "end_at": {
            "type": "integer",
            "description": "schedule end time, timestamp"
          },
          "repeat": {
            "type": "object",
            "description": "repeat options, only work when mode_type equal Repeat,",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "daily",
                  "weekly",
                  "monthly",
                  "yearly"
                ],
                "description": "repeat type"
              },
              "daily": {
                "type": "object",
                "description": "repeat daily options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval days"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              },
              "weekly": {
                "type": "object",
                "description": "repeat weekly options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval days"
                  },
                  "on": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday"
                      ]
                    },
                    "description": "on weekdays"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              },
              "monthly": {
                "type": "object",
                "description": "repeat monthly options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval months"
                  },
                  "on_type": {
                    "type": "string",
                    "enum": [
                      "date",
                      "week"
                    ],
                    "description": "on type"
                  },
                  "on_date_day": {
                    "type": "integer",
                    "description": "on date day"
                  },
                  "on_week_seq": {
                    "type": "string",
                    "enum": [
                      "first",
                      "second",
                      "third",
                      "fourth",
                      "last"
                    ],
                    "description": "on week seq"
                  },
                  "on_week": {
                    "type": "string",
                    "enum": [
                      "Sunday",
                      "Monday",
                      "Tuesday",
                      "Wednesday",
                      "Thursday",
                      "Friday",
                      "Saturday"
                    ],
                    "description": "on week"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              },
              "yearly": {
                "type": "object",
                "description": "repeat yearly options",
                "properties": {
                  "interval": {
                    "type": "integer",
                    "description": "interval years (less or equal than 2 years)"
                  },
                  "on_type": {
                    "type": "string",
                    "enum": [
                      "date",
                      "week"
                    ],
                    "description": "on type"
                  },
                  "on_date_month": {
                    "type": "integer",
                    "description": "on date month"
                  },
                  "on_date_day": {
                    "type": "integer",
                    "description": "on date day"
                  },
                  "on_week_month": {
                    "type": "integer",
                    "description": "on week month"
                  },
                  "on_week_seq": {
                    "type": "string",
                    "enum": [
                      "first",
                      "second",
                      "third",
                      "fourth",
                      "last"
                    ],
                    "description": "on week seq"
                  },
                  "on_week": {
                    "type": "string",
                    "enum": [
                      "Sunday",
                      "Monday",
                      "Tuesday",
                      "Wednesday",
                      "Thursday",
                      "Friday",
                      "Saturday"
                    ],
                    "description": "on week"
                  },
                  "end": {
                    "$ref": "#/components/schemas/RepeatEnd"
                  }
                }
              }
            }
          },
          "subject": {
            "$ref": "#/components/schemas/CommonShort"
          },
          "program": {
            "$ref": "#/components/schemas/CommonShort"
          },
          "class_type": {
            "type": "string",
            "enum": [
              "OnlineClass",
              "OfflineClass",
              "Homework",
              "Task"
            ],
            "description": "schedule class_type"
          },
          "due_at": {
            "type": "integer",
            "description": "If I schedule the time as homework or task, then I should be able to set a due date. This is optional for me. The due date cannot be earlier than class end time."
          },
          "description": {
            "type": "string",
            "description": "schedule description"
          },
          "attachment": {
            "$ref": "#/components/schemas/CommonShort"
          },
          "is_all_day": {
            "type": "boolean",
            "description": "all_day flag"
          },
          "is_repeat":{
            "type": "boolean",
            "description": "If true, schedule is repeat"
          }
        }
      },
      "CommonShort": {
        "type": "object",
        "description": "short info",
        "properties": {
          "id": {
            "type": "string",
            "description": "id"
          },
          "name": {
            "type": "string",
            "description": "name"
          }
        }
      },
      "RepeatEnd": {
        "type": "object",
        "description": "repeat end options",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "never",
              "after_count",
              "after_time"
            ]
          },
          "after_count": {
            "type": "integer",
            "description": "end after N count"
          },
          "after_time": {
            "type": "integer",
            "description": "end after the time(unix timestamp)"
          }
        }
      }
    }
  }
}